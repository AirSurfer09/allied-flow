{"code":"var __defProp=Object.defineProperty;var __name=(target,value)=>__defProp(target,\"name\",{value,configurable:true});import{initTRPC,TRPCError}from\"@trpc/server\";import superjson from\"superjson\";import{ZodError}from\"zod\";import{db}from\"@repo/db/client\";const createTRPCContext=__name(opts=>{const claims=opts.claims;const source=opts.headers[\"x-trpc-source\"]??\"unknown\";console.log(\">>> tRPC Request from\",source,\"by\",claims);return{claims,db}},\"createTRPCContext\");const t=initTRPC.context().create({transformer:superjson,errorFormatter:__name(({shape,error})=>({...shape,data:{...shape.data,zodError:error.cause instanceof ZodError?error.cause.flatten():null}}),\"errorFormatter\")});const createCallerFactory=t.createCallerFactory;const createTRPCRouter=t.router;const publicProcedure=t.procedure;const protectedProcedure=t.procedure.use(({ctx,next})=>{if(!ctx.claims){throw new TRPCError({code:\"UNAUTHORIZED\"})}return next({ctx:{claims:ctx.claims}})});export{createCallerFactory,createTRPCContext,createTRPCRouter,protectedProcedure,publicProcedure};\n","warnings":[],"map":{"version":3,"mappings":"kHASA,OAAS,SAAU,cAAiB,eAEpC,OAAO,cAAe,YACtB,OAAS,aAAgB,MAEzB,OAAS,OAAU,kBAcZ,MAAM,kBAAoB,OAAC,MAG5B,CACJ,MAAM,OAAS,KAAK,OACpB,MAAM,OAAS,KAAK,QAAQ,eAAe,GAAK,UAEhD,QAAQ,IAAI,wBAAyB,OAAQ,KAAM,MAAM,EAEzD,MAAO,CACL,OACA,EACF,CACF,EAbiC,qBAqBjC,MAAM,EAAI,SAAS,QAAkC,EAAE,OAAO,CAC5D,YAAa,UACb,eAAgB,QAAC,CAAE,MAAO,KAAM,KAAO,CACrC,GAAG,MACH,KAAM,CACJ,GAAG,MAAM,KACT,SAAU,MAAM,iBAAiB,SAAW,MAAM,MAAM,QAAQ,EAAI,IACtE,CACF,GANgB,iBAOlB,CAAC,EAMM,MAAM,oBAAsB,EAAE,oBAa9B,MAAM,iBAAmB,EAAE,OAS3B,MAAM,gBAAkB,EAAE,UAU1B,MAAM,mBAAqB,EAAE,UAAU,IAAI,CAAC,CAAE,IAAK,IAAK,IAAM,CACnE,GAAI,CAAC,IAAI,OAAQ,CACf,MAAM,IAAI,UAAU,CAAE,KAAM,cAAe,CAAC,CAC9C,CACA,OAAO,KAAK,CACV,IAAK,CAEH,OAAQ,IAAI,MACd,CACF,CAAC,CACH,CAAC","names":[],"ignoreList":[],"sources":["C:\\Mains\\Programming\\Typescript\\allied-flow\\packages\\api\\src\\trpc.ts"],"sourcesContent":[null]}}